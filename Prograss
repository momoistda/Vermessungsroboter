04/09

export ROS_DOMAIN_ID=50
ros2 launch nav2_bringup navigation_launch.py
ros2 launch turtlebot3_cartographer cartographer.launch.py


#colcon build --packages-select RP_pubsub
source install/setup.bash
ros2 run RP_pubsub goal_pub 
ros2 run RP_pubsub ziel_sucher

Problem:
goal_pub und ziel_sucher, both worked but, 
robi fährt immer hin und her zurück. warum?
---------------------------------------------------------------------------------------------


KW18-19:
successful with command:

1. run nav
´´´ros2 launch nav2_bringup navigation_launch.py´´´

2. run slam
´´´ros2 launch slam_toolbox online_async_launch.py´´´

3. run rviz2 and add map topic
rviz2 

4. give robi a goal
´´´ros2 topic pub /goal_pose geometry_msgs/PoseStamped "{header: {stamp: {sec: 0}, frame_id: 'map'}, pose: {position: {x: 0.2, y: 0.0, z: 0.0}, orientation: {w: 1.0}}}"
´´´








KW 16-17

1. Installed nav2, slam-toolbox, nav2-bringup

----------------------------run---slam----to---save----a----map------------------
https://emanual.robotis.com/docs/en/platform/turtlebot3/slam/#run-slam-node

1. Run SLAM
 export TURTLEBOT3_MODEL=burger
 ros2 launch turtlebot3_cartographer cartographer.launch.py
 
 2. run teleoperation node to controll the robot
 $ export TURTLEBOT3_MODEL=burger
$ ros2 run turtlebot3_teleop teleop_keyboard

3. configuration can be done via LUA file:
   turtlebot3_cartographer/config/turtlebot3_lds_2d.lua 
   
4. save the map 
ros2 run nav2_map_server map_saver_cli -f ~/map

5. The map:
  which is used for navigation. (white area is collision free area while black area is occupied and inaccessible area, and gray area represents the unknown area.)
--------------------------------------------------------------------------------------
-------------map.map-------------------map.yaml---------------saved-------------------




--------------------run-----------navigation2------------------------------------------
tried: $ ros2 launch turtlebot3_navigation2 navigation2.launch.py map:=$HOME/map.yaml

https://emanual.robotis.com/docs/en/platform/turtlebot3/navigation/

It is only worked the first time, after that, problem.
-------------------so------try--------nav2_bringup---------------------------------------  
https://navigation.ros.org/tutorials/docs/navigation2_on_real_turtlebot3.html

6. run Nav2
ros2 launch nav2_bringup bringup_launch.py use_sim_time:=False autostart:=False map:=/path/to/your-map.yaml

7. run RVIZ
ros2 run rviz2 rviz2 -d $(ros2 pkg prefix nav2_bringup)/share/nav2_bringup/rviz/nav2_default_view.rviz

8. klick start and you will see the map

9. Initialize the location of robi with 2D Pose Estimate
  
10. Send a Goal Pose using GoalTool button. 
Once you define the target pose, Nav2 will find a global path and start navigating the robot on the map.



--------------------------------understand---about-----------map.yaml----------------------
In the fiel map.yaml saved the infromation about the map. 
http://wiki.ros.org/map_server
With the Color value, the robot can be controlled to drive to the unknown environment. 

image : Path to the image file containing the occupancy data; can be absolute, or relative to the location of the YAML file

resolution : Resolution of the map, meters / pixel

origin : The 2-D pose of the lower-left pixel in the map, as (x, y, yaw), with yaw as counterclockwise rotation (yaw=0 means no rotation). Many parts of the system currently ignore yaw.

occupied_thresh : Pixels with occupancy probability greater than this threshold are considered completely occupied.

free_thresh : Pixels with occupancy probability less than this threshold are considered completely free.

negate : Whether the white/black free/occupied semantics should be reversed (interpretation of thresholds is unaffected)

Optional parameter:

mode : Can have one of three values: trinary, scale, or raw. Trinary is the default. More information on how this changes the value interpretation is in the next section.

Here, the mode is very important to understand, if a cell is occupied, free or unknown.
And! negate helps to know, if you should reverse the value.

Value Interpretation
Given a pixel that has a COLOR value x in the range [0, 256), how should we interpret this value when put into the ROS message? First we convert integer x to a floating point number p depending on the interpretation of the negate flag from the yaml.

If negate is false, p = (255 - x) / 255.0. This means that black (0) now has the highest value (1.0) and white (255) has the lowest (0.0).

If negate is true, p = x / 255.0. This is the non-standard interpretation of images, which is why it is called negate, even though the math indicates that x is not negated. Nomenclature is hard.

Trinary
The standard interpretation is the trinary interpretation, i.e. interpret all values so that the output ends up being one of three values.

If p > occupied_thresh, output the value 100 to indicate the cell is occupied.

If p < free_thresh, output the value 0 to indicate the cell is free.

Otherwise, output -1 a.k.a. 255 (as an unsigned char), to indicate that the cell is unknown.

Scale
This tweaks the above interpretation to allow for more output values than trinary.

As before if p > occupied_thresh, output the value 100. If p < free_thresh, output the value 0.

Otherwise, output 99 * (p - free_thresh) / (occupied_thresh - free_thresh)

This will allow you to output a full gradient of values ranging from [0, 100]. To output -1, simply use the alpha channel of a png, where any transparency will be interpreted as unknown.

Raw
This mode will output x for each pixel, so output values are [0, 255].




